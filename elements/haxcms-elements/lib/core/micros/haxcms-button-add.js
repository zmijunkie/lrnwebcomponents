import { store } from "../haxcms-site-store.js";
import { HAXStore } from "@lrnwebcomponents/hax-body/lib/hax-store.js";
import { HAXCMSButton } from "../utils/HAXCMSButton.js";
import { toJS } from "mobx";
export class HAXCMSButtonAdd extends HAXCMSButton {
  static get tag() {
    return "haxcms-button-add";
  }

  constructor() {
    super();
    this.t = this.t || {};
    this.t.newPageAdded = "New page added";
    this.t.newPage = "New page";
    this.t.copy = "Copy";
    this.t.newChildPage = "New child page";
    this.t.duplicatePage = "Duplicate page";
    this.icon = "hax:add-page";
    this.voiceCommand = "add page";
    this.dark = false;
    this.type = "sibling";
    this.autoEdit = false;
  }

  static get properties() {
    return {
      ...super.properties,
      autoEdit: { type: Boolean, attribute: "auto-edit" },
      type: { type: String },
    };
  }

  render() {
    // render the button passing in our translated strings
    switch (this.type) {
      case "sibling":
        return this.renderButton(this.t.newPage, this.t.newPage);
      case "child":
        this.icon = "hax:add-child-page";
        return this.renderButton(this.t.newChildPage, this.t.newChildPage);
      case "duplicate":
        this.icon = "hax:duplicate";
        return this.renderButton(this.t.duplicatePage, this.t.duplicatePage);
    }
  }

  connectedCallback() {
    super.connectedCallback();
    window.addEventListener(
      "haxcms-create-node-success",
      this.HAXCMSButtonClickResponse.bind(this)
    );
  }

  disconnectedCallback() {
    window.removeEventListener(
      "haxcms-create-node-success",
      this.HAXCMSButtonClickResponse.bind(this)
    );
    super.disconnectedCallback();
  }

  HAXCMSButtonClick(e) {
    let order = null;
    let title = this.t.newPage;
    let parent = null;
    const item = toJS(store.activeItem);
    if (item) {
      if (this.type === "sibling") {
        parent = item.parent;
        order = parseInt(item.order) + 1;
      } else if (this.type === "child") {
        parent = item.id;
        // @todo might need to check last child and add to end order wise there
        order = 0;
      } else if (this.type === "duplicate") {
        title = item.title + " " + this.t.copy;
        parent = item.parent;
        order = parseInt(item.order) + 1;
      }
    }
    // sanity fallback in case a translation system is bricked
    if (title === "") {
      title = "New";
    }
    var payload = {
      node: {
        title: title,
        location: "",
      },
      order: order,
      parent: parent,
    };
    // special flag for duplicating the content of an existing item
    if (this.type === "duplicate") {
      payload.node.duplicate = item.id;
    }
    // wrapper on CustomEvent to ensure uniformity
    this.HAXCMSFireButtonEvent("haxcms-create-node", this, payload);
  }
  HAXCMSButtonClickResponse(e) {
    // only respond to this if the event was generated by this element
    // this helps avoid multiple instances of a button coliding
    if (this === e.detail.originalTarget) {
      if (this.autoEdit) {
        // force hax tray to open
        HAXStore.haxTray.collapsed = false;
        // @todo this implies a timing issue on response and the wiping of material
        // see https://github.com/elmsln/issues/issues/938
        setTimeout(() => {
          // force into edit mode
          store.editMode = true;
        }, 250);
      }
    }
  }
}

customElements.define(HAXCMSButtonAdd.tag, HAXCMSButtonAdd);
