{
  "version": 1,
  "tags": [
    {
      "name": "rich-text-editor-button",
      "description": "`rich-text-editor-button`\nis a basic button for rich text editor (custom buttons can extend RichTextEditorButtonBehaviors)\n\n### Styling\n`<rich-text-editor-button>` uses RichTextToolbarStyles constant to set \nSimpleToolbarBehaviors's simple-toolbar/simple-toolbar-button variables.\n\nTo further customize a toolbar and its buttons:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--rich-text-editor-border-color | default border color | #ddd\n--rich-text-editor-border-width | default border width | 1px\n--rich-text-editor-bg | default toolbar background | #ffffff\n--rich-text-editor-button-opacity | default button opacity | 1\n--rich-text-editor-button-color | default button color | #444\n--rich-text-editor-button-bg | default button background | #ffffff\n--rich-text-editor-button-border-color | overrides default border-color for buttons | transparent\n--rich-text-editor-button-toggled-opacity | overrides default opacity when button is toggled | 1\n--rich-text-editor-button-toggled-color | overrides default text color when button is toggled | #222\n--rich-text-editor-button-toggled-bg | overrides default background when button is toggled | #ddd\n--rich-text-editor-button-toggled-border-color | overrides default border-color when button is toggled | transparent\n--rich-text-editor-button-hover-opacity | overrides default opacity when button is hovered or focused | 1\n--rich-text-editor-button-hover-color | overrides default text color when button is hovered or focused  | #000\n--rich-text-editor-button-hover-bg | overrides default background when button is hovered or focused | #f0f0f0\n--rich-text-editor-button-hover-border-color | overrides default border-color when button is hovered or focused | unset\n--rich-text-editor-button-disabled-opacity | overrides default opacity when button is disabled | 1\n--rich-text-editor-button-disabled-color | overrides default text color when button is disabled | #666\n--rich-text-editor-button-disabled-bg | overrides default background when button is disabled | transparent\n--rich-text-editor-button-disabled-border-color | overrides default border-color when button is toggled | transparent\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-emoji-picker",
      "description": "`rich-text-editor-emoji-picker`\nan emoji picker for the rich-text-editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `emoji-types` {`any[]`} - Emoji types types to include\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `emojiTypes` {`any[]`} - Emoji types types to include\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `labelVisibleClass` {`\"show\" | \"hide\"`} - \n\n  * `picker` - \n\n  * `expanded` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - overrides RichTextEditorButtonBehaviors\ntoggle button behaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "emoji-types",
          "description": "`emoji-types` {`any[]`} - Emoji types types to include\n\nProperty: emojiTypes\n\nDefault: emotions,people,nature,food,travel,activities,objects,symbols,flags"
        },
        {
          "name": "hideNullOption",
          "description": "`hideNullOption` {`boolean`} - Hide the null option\n\nProperty: hideNullOption",
          "valueSet": "v"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon\n\nDefault: editor:insert-emoticon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert emoji"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-heading-picker",
      "description": "`rich-text-editor-heading-picker`\na heading picker for the rich-text-editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `labelVisibleClass` {`string`} - \n\n  * `picker` - \n\n  * `expanded` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - overrides RichTextEditorButtonBehaviors\ntoggle button behaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "blocks",
          "description": "`blocks` {`any[]`} - block element options as array of objects,\neg. [ { label: \"Paragraph\", tag: \"p\" }, { label: \"Heading 1\", tag: \"h1\" }, ...]\n\nProperty: blocks\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "hideNullOption",
          "description": "`hideNullOption` {`boolean`} - Hide the null option\n\nProperty: hideNullOption\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: undefined"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: formatBlock"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: p,h1,h2,h3,h4,h5,h6,div,address,blockquote,pre"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` - Optional icon for null value\n\nProperty: icon\n\nDefault: undefined"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Block format"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-icon-picker",
      "description": "`rich-text-editor-icon-picker`\nan icon picker for the rich-text-editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `icons` {`never[]`} - \n\n  * `excludes` {`never[]`} - \n\n  * `includeSets` {`never[]`} - \n\n  * `excludeSets` {`never[]`} - \n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `labelVisibleClass` {`\"show\" | \"hide\"`} - \n\n  * `picker` - \n\n  * `expanded` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - overrides RichTextEditorButtonBehaviors\ntoggle button behaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "hideNullOption",
          "description": "`hideNullOption` {`boolean`} - Hide the null option\n\nProperty: hideNullOption",
          "valueSet": "v"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: simple-icon-lite"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` - Optional icon for null value\n\nProperty: icon\n\nDefault: undefined"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert icon"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-image",
      "description": "`rich-text-editor-image`\nan inline image button for rich text editor\n\nEvents:\n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`string`} - overrides RichTextEditorPromptButtonBehaviors\nto customize for setting image properties\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `targetedNode` - \n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean | undefined`} - overrides RichTextEditorPromptButtonBehaviors\nso that isToggled is based on toggled property\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`({} | {} | {})[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: img"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: editor:insert-photo"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert Inline Image"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-link",
      "description": "`rich-text-editor-link`\na link button for rich text editor\n\nEvents:\n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `allowTarget` {`boolean`} - allow user to set a target attribute for link\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`string`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `allowTarget` {`boolean`} - allow user to set a target attribute for link\n\n  * `defaultFields` {`any[]`} - \n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - overrides RichTextEditorPromptButtonBehaviors\nso that href property determines\nwhether or not to link or unlink\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `targetedNode` - \n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean | undefined`} - overrides RichTextEditorPromptButtonBehaviors\nso that isToggled is based on toggled property\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`string`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "allowTarget",
          "description": "`allowTarget` {`boolean`} - allow user to set a target attribute for link\n\nProperty: allowTarget",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: ,[object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: createLink"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand\n\nDefault: unlink"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: a"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: link"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Link"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel\n\nDefault: Edit link"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`string`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: ctrl+k"
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-picker",
      "description": "`rich-text-editor-picker`\na picker for rich text editor (custom buttons can RichTextEditorPickerBehaviors)\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `labelVisibleClass` {`\"show\" | \"hide\"`} - \n\n  * `picker` - \n\n  * `expanded` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - overrides RichTextEditorButtonBehaviors\ntoggle button behaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "hideNullOption",
          "description": "`hideNullOption` {`boolean`} - Hide the null option\n\nProperty: hideNullOption",
          "valueSet": "v"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert link"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-prompt-button",
      "description": "`rich-text-editor-prompt-button`\nprompts for more information for rich text editor\n(custom buttons can extend RichTextEditorPromptButtonBehaviors)\n\nEvents:\n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` - determines commandVal based on values passed from prompt\n(can be overriden for custom prompt command values)\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `targetedNode` - \n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: span"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-source-code",
      "description": "`rich-text-editor-source-code`\na button to toggle source code on rich text editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` {`boolean`} - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` {`boolean`} - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Is this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `labelToggled` {`string`} - \n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` {`boolean`} - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` {`boolean`} - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Is this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether not button is toggled based on toggled property\noverriden from RichTextEditorButtonBehaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: viewSource"
        },
        {
          "name": "command-val",
          "description": "`command-val` {`boolean`} - Optional parameter for the command.\n\nProperty: commandVal\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand\n\nDefault: viewSource"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` {`boolean`} - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: code"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Source Code"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Is this button toggle?\n\nProperty: toggled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: cmd+<"
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-symbol-picker",
      "description": "`rich-text-editor-symbol-picker`\na symbol picker for the rich-text-editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `symbol-types` {`any[]`} - Symbol types to include\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `symbolTypes` {`any[]`} - Symbol types to include\n\n  * `hideNullOption` {`boolean`} - Hide the null option\n\n  * `labelVisibleClass` {`\"show\" | \"hide\"`} - \n\n  * `picker` - \n\n  * `expanded` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` - value of elected options\n\n  * `command` {`string`} - command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional icon for null value\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - overrides RichTextEditorButtonBehaviors\ntoggle button behaviors\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "symbol-types",
          "description": "`symbol-types` {`any[]`} - Symbol types to include\n\nProperty: symbolTypes\n\nDefault: symbols,math,characters,greek,misc"
        },
        {
          "name": "hideNullOption",
          "description": "`hideNullOption` {`boolean`} - Hide the null option\n\nProperty: hideNullOption",
          "valueSet": "v"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "titleAsHtml",
          "description": "`titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` - value of elected options\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - command used for document.execCommand.\n\nProperty: command\n\nDefault: insertHTML"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional icon for null value\n\nProperty: icon\n\nDefault: editor:functions"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Insert symbol"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: "
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-underline",
      "description": "`rich-text-editor-underline`\na button for rich text editor (custom buttons can extend this)\n\nEvents:\n\n  * `rich-text-editor-prompt-open` {`CustomEvent<this>`} - \n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `id` {`string`} - is element a custom inline widget element?\n\n  * `__wrap` - contents node inside selected range\n\n  * `__oldValue` - contents node inside selected range\n\n  * `promptCommand` - determines which command based on values passed from prompt\n(can be overriden for custom prompt  commands)\n\n  * `promptCommandVal` {`void`} - overriden from RichTextEditorPromptButtonBehaviors:\nkeeps prompt command value undefined\n\n  * `setsInnerHTML` {`boolean`} - determines if prompt also sets innerHTML of range\n(can be overriden for custom prompts)\n\n  * `targetedNode` - \n\n  * `editableSelection` {`boolean`} - \n\n  * `fields` {`{}[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "id",
          "description": "`id` {`string`} - is element a custom inline widget element?\n\nProperty: id"
        },
        {
          "name": "__wrap",
          "description": "`__wrap` - contents node inside selected range\n\nProperty: __wrap"
        },
        {
          "name": "__oldValue",
          "description": "`__oldValue` - contents node inside selected range\n\nProperty: __oldValue"
        },
        {
          "name": "fields",
          "description": "`fields` {`{}[]`} - fields for prompt popover.\n\nProperty: fields\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: underline"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: u"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: editor:format-underlined"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Underline (not recommended)"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: ctrl+u"
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onrich-text-editor-prompt-open",
          "description": "`rich-text-editor-prompt-open` {`CustomEvent<this>`} - "
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-unlink",
      "description": "`rich-text-editor-unlink`\na link button for rich text editor\n\nEvents:\n\n  * `wrapselection` {`CustomEvent<any>`} - \n\n  * `command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `register-button` {`CustomEvent<this>`} - \n\n  * `deregister-button` {`CustomEvent<this>`} - \n\n  * `button-toggled` {`CustomEvent<this>`} - \n\n  * `update-button-registry` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `command-val` - Optional parameter for the command.\n\n  * `toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggled-command-val` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `show-tooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggled-label` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `show-text-label` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `is-current-item` {`boolean`} - \n\nProperties:\n\n  * `command` {`string`} - The command used for document.execCommand.\n\n  * `commandVal` - Optional parameter for the command.\n\n  * `toggledCommand` {`string`} - The command used for document.execCommand when toggled.\n\n  * `toggledCommandVal` - Optional parameter for the command when toggled.\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `operationCommand` - gets command param for document.execCommand\n\n  * `operationCommandVal` - gets value param for document.execCommand\n\n  * `tagsArray` {`string[]`} - tagslist as an array\n\n  * `tagsList` {`string`} - tags edited by this button\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\n  * `describedby` {`string`} - Optional to set aria-describedby.\n\n  * `icon` {`string`} - Optional iron icon name for the button.\n\n  * `label` {`string`} - Label for the icon.\n\n  * `showTooltip` {`boolean`} - Alway show tooltip.\n\n  * `target` - The active selected range, inherited from the toolbar\n\n  * `toggledIcon` {`string`} - Optional iron icon name for the button if it is toggled.\n\n  * `toggledLabel` {`string`} - Label for the icon, if button is toggled.\n\n  * `toggled` {`boolean`} - Can this button toggle?\n\n  * `toggledTooltip` {`string`} - Label for the icon, if button is toggled.\n\n  * `button` - gets button element\n\n  * `currentLabel` {`string`} - current label based on toggled state\n\n  * `currentIcon` {`string`} - current icon based on toggled state\n\n  * `currentTooltip` {`string`} - current label based on toggled state\n\n  * `isToggled` {`boolean`} - whether button is toggled\n\n  * `focusableElement` - \n\n  * `hasLabel` {`boolean`} - is label specified\n\n  * `hasIcon` {`boolean`} - is icon specified\n\n  * `hasTooltip` {`boolean`} - is tooltip specified\n\n  * `labelVisible` {`boolean`} - is visible label is needed or specified\n\n  * `tooltipVisible` - is tooltip needed or specified\n\n  * `iconTemplate` {`\"\" | TemplateResult<1>`} - template for button icon\n\n  * `labelTemplate` {`\"\" | TemplateResult<1>`} - template for button label\n\n  * `tooltipTemplate` {`\"\" | TemplateResult<1>`} - template for button tooltip\n\n  * `buttonInnerTemplate` {`TemplateResult<1>`} - template for inner part of button (label and icon) in order specified\n\n  * `buttonTemplate` {`TemplateResult<1>`} - template for button, based on whether or not the button toggles\n\n  * `iconPosition` {`string`} - \n\n  * `alignVertical` {`string`} - \n\n  * `alignHorizontal` {`string`} - \n\n  * `disabled` {`boolean`} - Hide the null option\n\n  * `showTextLabel` {`boolean`} - Show text label even if an icon is named?\n\n  * `toggles` {`boolean`} - Can this button toggle?\n\n  * `radio` {`boolean`} - for radio-button behavior\n\n  * `shortcutKeys` {`string`} - Optional space-separated list of shortcut keys\n\n  * `isCurrentItem` {`boolean`} - ",
      "attributes": [
        {
          "name": "command",
          "description": "`command` {`string`} - The command used for document.execCommand.\n\nProperty: command\n\nDefault: unlink"
        },
        {
          "name": "command-val",
          "description": "`command-val` - Optional parameter for the command.\n\nProperty: commandVal"
        },
        {
          "name": "toggled-command",
          "description": "`toggled-command` {`string`} - The command used for document.execCommand when toggled.\n\nProperty: toggledCommand"
        },
        {
          "name": "toggled-command-val",
          "description": "`toggled-command-val` - Optional parameter for the command when toggled.\n\nProperty: toggledCommandVal"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "tagsList",
          "description": "`tagsList` {`string`} - tags edited by this button\n\nProperty: tagsList\n\nDefault: a"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "controls",
          "description": "`controls` {`string`} - The `id` of the `simple-toolbar` that the toolbar controls.\n\nProperty: controls"
        },
        {
          "name": "describedby",
          "description": "`describedby` {`string`} - Optional to set aria-describedby.\n\nProperty: describedby"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Optional iron icon name for the button.\n\nProperty: icon\n\nDefault: mdextra:unlink"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the icon.\n\nProperty: label\n\nDefault: Remove Link"
        },
        {
          "name": "show-tooltip",
          "description": "`show-tooltip` {`boolean`} - Alway show tooltip.\n\nProperty: showTooltip",
          "valueSet": "v"
        },
        {
          "name": "target",
          "description": "`target` - The active selected range, inherited from the toolbar\n\nProperty: target"
        },
        {
          "name": "toggled-icon",
          "description": "`toggled-icon` {`string`} - Optional iron icon name for the button if it is toggled.\n\nProperty: toggledIcon"
        },
        {
          "name": "toggled-label",
          "description": "`toggled-label` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledLabel"
        },
        {
          "name": "toggled",
          "description": "`toggled` {`boolean`} - Can this button toggle?\n\nProperty: toggled",
          "valueSet": "v"
        },
        {
          "name": "toggled-tooltip",
          "description": "`toggled-tooltip` {`string`} - Label for the icon, if button is toggled.\n\nProperty: toggledTooltip"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Hide the null option\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "show-text-label",
          "description": "`show-text-label` {`boolean`} - Show text label even if an icon is named?\n\nProperty: showTextLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "toggles",
          "description": "`toggles` {`boolean`} - Can this button toggle?\n\nProperty: toggles\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "radio",
          "description": "`radio` {`boolean`} - for radio-button behavior\n\nProperty: radio\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` {`string`} - Optional space-separated list of shortcut keys\n\nProperty: shortcutKeys\n\nDefault: ctrl+k"
        },
        {
          "name": "is-current-item",
          "description": "`is-current-item` {`boolean`} - \n\nProperty: isCurrentItem\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "onwrapselection",
          "description": "`wrapselection` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncommand",
          "description": "`command` {`CustomEvent<{ command: any; commandVal: any; range: any; button: this; }>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onregister-button",
          "description": "`register-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onderegister-button",
          "description": "`deregister-button` {`CustomEvent<this>`} - "
        },
        {
          "name": "onbutton-toggled",
          "description": "`button-toggled` {`CustomEvent<this>`} - "
        },
        {
          "name": "onupdate-button-registry",
          "description": "`update-button-registry` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-clipboard",
      "description": "`rich-text-editor-clipboard`\n`A textarea that holds clipboard.`\n\nAttributes:\n\n  * `__textarea` - \n\nProperties:\n\n  * `__textarea` - \n\n  * `value` - \n\n  * `haxUIElement` {`boolean`} - ",
      "attributes": [
        {
          "name": "__textarea",
          "description": "`__textarea` - \n\nProperty: __textarea"
        }
      ]
    },
    {
      "name": "rich-text-editor-highlight",
      "description": "`rich-text-editor-highlight`\n`A highlights range when toolbar UI has focus.`\n\nAttributes:\n\n  * `hidden` {`boolean`} - \n\n  * `range` - \n\n  * `id` {`string`} - \n\nProperties:\n\n  * `hidden` {`boolean`} - \n\n  * `range` - \n\n  * `haxUIElement` {`boolean`} - \n\n  * `id` {`string`} - ",
      "attributes": [
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - \n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "range",
          "description": "`range` - \n\nProperty: range"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - \n\nProperty: id"
        }
      ]
    },
    {
      "name": "rich-text-editor-prompt",
      "description": "`rich-text-editor-prompt`\n`A utility that manages state of multiple rich-text-prompts on one page.`\n\nEvents:\n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\nAttributes:\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `__focused` {`boolean`} - whether prompt has focus\n\n  * `__hovered` {`boolean`} - whether prompt is hovered\n\n  * `__opened` {`boolean`} - whether prompt isopen\n\n  * `range` - selected text.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\nProperties:\n\n  * `fields` {`any[]`} - fields for prompt popover.\n\n  * `value` - prefilled value of prompt\n\n  * `__focused` {`boolean`} - whether prompt has focus\n\n  * `__hovered` {`boolean`} - whether prompt is hovered\n\n  * `__opened` {`boolean`} - whether prompt isopen\n\n  * `hidden` {`boolean`} - hides prompt when not open\n\n  * `range` - selected text.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - ",
      "attributes": [
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - fields for prompt popover.\n\nProperty: fields"
        },
        {
          "name": "value",
          "description": "`value` - prefilled value of prompt\n\nProperty: value"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether prompt has focus\n\nProperty: __focused",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether prompt is hovered\n\nProperty: __hovered",
          "valueSet": "v"
        },
        {
          "name": "__opened",
          "description": "`__opened` {`boolean`} - whether prompt isopen\n\nProperty: __opened",
          "valueSet": "v"
        },
        {
          "name": "range",
          "description": "`range` - selected text.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-source",
      "description": "`rich-text-editor-source`\na standalone rich text editor\n### Styling\n\n`<rich-text-editor-source>`  uses RichTextStyles variables, \nas well as an additional style:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--rich-text-editor-source-min-height | minimum height of editor | 20px\n\nAttributes:\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `hidden` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__target` - id for editable region\n\n  * `__toolbar` - id for toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `id` {`string`} - editor's unique id\n\nProperties:\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `hidden` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__target` - id for editable region\n\n  * `__toolbar` - id for toolbar\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `id` {`string`} - editor's unique id",
      "attributes": [
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "__target",
          "description": "`__target` - id for editable region\n\nProperty: __target"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - id for toolbar\n\nProperty: __toolbar"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        }
      ]
    },
    {
      "name": "rich-text-editor-breadcrumbs",
      "description": "`rich-text-editor-breadcrumbs`\na toolbar of selection's ancestor breadcrumbs\n\n### Styling\n`<rich-text-editor-breadcrumbs>` uses RichTextToolbarStyles constant \nfrom rich-text-editor-toolbar to set SimpleToolbarBehaviors's \nsimple-toolbar/simple-toolbar-button variables.\n\nEvents:\n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\nAttributes:\n\n  * `controls` {`string`} - active rict-text-editor.\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `hidden` {`boolean`} - Hide breadcrumbs\n\n  * `sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\n  * `label` {`string`} - breadcrumb labels.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\nProperties:\n\n  * `controls` {`string`} - active rict-text-editor.\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `hidden` {`boolean`} - Hide breadcrumbs\n\n  * `sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\n  * `label` {`string`} - breadcrumb labels.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - ",
      "attributes": [
        {
          "name": "controls",
          "description": "`controls` {`string`} - active rict-text-editor.\n\nProperty: controls"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - Hide breadcrumbs\n\nProperty: hidden\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should breadcrumbs stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - breadcrumb labels.\n\nProperty: label\n\nDefault: Select"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar-full",
      "description": "`rich-text-editor-toolbar-full`\n`a full toolbar with breadcrumbs for the rich text editor`\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `close` {`CustomEvent<this>`} - \n\n  * `editor-change` {`CustomEvent<this>`} - \n\n  * `range-changed` {`CustomEvent<this>`} - \n\n  * `enabled` {`CustomEvent<any>`} - \n\n  * `disabled` {`CustomEvent<any>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `aria-controls` {`string`} - id of element controlled by toolbar\n\n  * `aria-label` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `undoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an undo button\n\n  * `redoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a redo button\n\n  * `historyButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a history button group: undo + redo\n\n  * `formatButton` {`{ label: string; type: string; }`} - default config for a format button\n\n  * `boldButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a bold button\n\n  * `italicButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for an italic button\n\n  * `underlineButton` {`{ type: string; }`} - default config for an underline button\n\n  * `strikethroughButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `removeFormatButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `codeButton` {`{ command: string; commandVal: string; toggles: boolean; label: string; type: string; }`} - default config for a remove format button\n\n  * `basicInlineButtonGroup` {`{ type: string; subtype: string; buttons: { label: string; type: string; }[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `linkButton` {`{ icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a link button\n\n  * `unlinkButton` {`{ icon: string; label: string; type: string; }`} - default config for a unlink button\n\n  * `linkButtonGroup` {`{ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; }`} - default config for a link button group: link\n\n  * `cutButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a cut button\n\n  * `copyButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a copy button\n\n  * `pasteButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a paste button\n\n  * `clipboardButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a clipboard button group: cut, copy, and paste\n\n  * `subscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a subscript button\n\n  * `superscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a superscript button\n\n  * `scriptButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a script button group: subscript & superscript\n\n  * `symbolButton` {`{ symbolTypes: string[]; type: string; }`} - default config for a symbol button\n\n  * `iconButton` {`{ type: string; }`} - default config for a symbol button\n\n  * `emojiButton` {`{ type: string; }`} - default config for an emoji button\n\n  * `imageButton` {`{ type: string; }`} - default config for an image button\n\n  * `insertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `advancedInsertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `justifyLeftButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyCenterButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyRightButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyFullButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; required: boolean; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for an insert button group: image\n\n  * `orderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an ordered list button\n\n  * `unorderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an unordered list button\n\n  * `blockquoteButton` {`{ command: string; commandVal: string; label: string; icon: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a blockquote button\n\n  * `indentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an indent button\n\n  * `outdentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an outdent button\n\n  * `listButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `listIndentButtonGroup` {`{ type: string; subtype: string; buttons: ({ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for an save button\n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a close button\n\n  * `saveCloseButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - default config for a save and close button group: save and close\n\n  * `sourceButton` {`{ type: string; }`} - default config for a view source button\n\n  * `sourceButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for a source button group: view source\n\n  * `defaultConfig` {`{ type: string; subtype: string; buttons: { type: string; }[]; }[]`} - default config for toolbar with\ndefault history, style, link, clipboard, script, insert, and list button groups\n\n  * `miniConfig` {`({ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - default config for toolbar with\ndefault a custom group of style buttons,\ndefault link button group,\ndefault script button group,\nand a custom list button groups\n\n  * `miniTemplate` {`TemplateResult<1>`} - a template that places toolbar in a container\nso that it can be positioned absolutely\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `controls` {`string`} - id of editor currently being controlled\n\n  * `disconnected` {`boolean`} - determines if the toolbar is hidden\n\n  * `noSelection` {`boolean`} - determines if the toolbar has an extive selection\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `isRangeInScope` - determines if current range is in scope of the target\n\n  * `enabledTargetHandlers` {`{ keydown: any; keypress: any; mousedown: any; mouseup: any; }`} - \n\n  * `targetHTML` {`string`} - gets cleaned HTML from the target\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - overriden default to enable breadcrums\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `ariaControls` {`string`} - id of element controlled by toolbar\n\n  * `ariaLabel` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `moreShortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` - default toolbar template uses simple-toolbar\n\n  * `firstItem` - gets first main menu item\n\n  * `nextItem` - gets next main menu item\n\n  * `previousItem` - gets next main menu item\n\n  * `lastItem` - gets last main menu item\n\n  * `mainItems` {`any[]`} - gets main menu items\n\n  * `keyCode` {`{ TAB: number; ENTER: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key codes by key\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "target",
          "description": "`target` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: target"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\nProperty: show"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__prompt",
          "description": "`__prompt` - \n\nProperty: __prompt"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "aria-controls",
          "description": "`aria-controls` {`string`} - id of element controlled by toolbar\n\nProperty: ariaControls"
        },
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - label for the toolbar\n\nProperty: ariaLabel"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<this>`} - "
        },
        {
          "name": "oneditor-change",
          "description": "`editor-change` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrange-changed",
          "description": "`range-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onenabled",
          "description": "`enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "ondisabled",
          "description": "`disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar-mini",
      "description": "`rich-text-editor-toolbar-mini`\n`a mini floating toolbar for the rich text editor`\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `close` {`CustomEvent<this>`} - \n\n  * `editor-change` {`CustomEvent<this>`} - \n\n  * `range-changed` {`CustomEvent<this>`} - \n\n  * `enabled` {`CustomEvent<any>`} - \n\n  * `disabled` {`CustomEvent<any>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `aria-controls` {`string`} - id of element controlled by toolbar\n\n  * `aria-label` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `undoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an undo button\n\n  * `redoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a redo button\n\n  * `historyButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a history button group: undo + redo\n\n  * `formatButton` {`{ label: string; type: string; }`} - default config for a format button\n\n  * `boldButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a bold button\n\n  * `italicButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for an italic button\n\n  * `underlineButton` {`{ type: string; }`} - default config for an underline button\n\n  * `strikethroughButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `removeFormatButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `codeButton` {`{ command: string; commandVal: string; toggles: boolean; label: string; type: string; }`} - default config for a remove format button\n\n  * `basicInlineButtonGroup` {`{ type: string; subtype: string; buttons: { label: string; type: string; }[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `linkButton` {`{ icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a link button\n\n  * `unlinkButton` {`{ icon: string; label: string; type: string; }`} - default config for a unlink button\n\n  * `linkButtonGroup` {`{ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; }`} - default config for a link button group: link\n\n  * `cutButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a cut button\n\n  * `copyButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a copy button\n\n  * `pasteButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a paste button\n\n  * `clipboardButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a clipboard button group: cut, copy, and paste\n\n  * `subscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a subscript button\n\n  * `superscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a superscript button\n\n  * `scriptButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a script button group: subscript & superscript\n\n  * `symbolButton` {`{ symbolTypes: string[]; type: string; }`} - default config for a symbol button\n\n  * `iconButton` {`{ type: string; }`} - default config for a symbol button\n\n  * `emojiButton` {`{ type: string; }`} - default config for an emoji button\n\n  * `imageButton` {`{ type: string; }`} - default config for an image button\n\n  * `insertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `advancedInsertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `justifyLeftButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyCenterButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyRightButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyFullButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; required: boolean; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for an insert button group: image\n\n  * `orderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an ordered list button\n\n  * `unorderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an unordered list button\n\n  * `blockquoteButton` {`{ command: string; commandVal: string; label: string; icon: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a blockquote button\n\n  * `indentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an indent button\n\n  * `outdentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an outdent button\n\n  * `listButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `listIndentButtonGroup` {`{ type: string; subtype: string; buttons: ({ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for an save button\n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a close button\n\n  * `saveCloseButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - default config for a save and close button group: save and close\n\n  * `sourceButton` {`{ type: string; }`} - default config for a view source button\n\n  * `sourceButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for a source button group: view source\n\n  * `defaultConfig` {`{ type: string; subtype: string; buttons: { type: string; }[]; }[]`} - default config for toolbar with\ndefault history, style, link, clipboard, script, insert, and list button groups\n\n  * `miniConfig` {`({ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - default config for toolbar with\ndefault a custom group of style buttons,\ndefault link button group,\ndefault script button group,\nand a custom list button groups\n\n  * `miniTemplate` {`TemplateResult<1>`} - a template that places toolbar in a container\nso that it can be positioned absolutely\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `controls` {`string`} - id of editor currently being controlled\n\n  * `disconnected` {`boolean`} - determines if the toolbar is hidden\n\n  * `noSelection` {`boolean`} - determines if the toolbar has an extive selection\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `isRangeInScope` - determines if current range is in scope of the target\n\n  * `enabledTargetHandlers` {`{ keydown: any; keypress: any; mousedown: any; mouseup: any; }`} - \n\n  * `targetHTML` {`string`} - gets cleaned HTML from the target\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `ariaControls` {`string`} - id of element controlled by toolbar\n\n  * `ariaLabel` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `moreShortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` - default toolbar template uses simple-toolbar\n\n  * `firstItem` - gets first main menu item\n\n  * `nextItem` - gets next main menu item\n\n  * `previousItem` - gets next main menu item\n\n  * `lastItem` - gets last main menu item\n\n  * `mainItems` {`any[]`} - gets main menu items\n\n  * `keyCode` {`{ TAB: number; ENTER: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key codes by key\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "target",
          "description": "`target` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: target"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\nProperty: show"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__prompt",
          "description": "`__prompt` - \n\nProperty: __prompt"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "aria-controls",
          "description": "`aria-controls` {`string`} - id of element controlled by toolbar\n\nProperty: ariaControls"
        },
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - label for the toolbar\n\nProperty: ariaLabel"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: miniConfig"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<this>`} - "
        },
        {
          "name": "oneditor-change",
          "description": "`editor-change` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrange-changed",
          "description": "`range-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onenabled",
          "description": "`enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "ondisabled",
          "description": "`disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor-toolbar",
      "description": "`rich-text-editor-toolbar`\nis a default toolbar for rich text editor \n(can customize by extending RichTextEditorToolbarBehaviors)\n\n### Styling\n`<rich-text-editor-toolbar>` uses RichTextToolbarStyles constant to set \nSimpleToolbarBehaviors's simple-toolbar/simple-toolbar-button variables.\n\nTo further customize a toolbar and its buttons:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--rich-text-editor-border-color | default border color | #ddd\n--rich-text-editor-border-width | default border width | 1px\n--rich-text-editor-bg | default toolbar background | #ffffff\n--rich-text-editor-button-opacity | default button opacity | 1\n--rich-text-editor-button-color | default button color | #444\n--rich-text-editor-button-bg | default button background | #ffffff\n--rich-text-editor-button-border-color | overrides default border-color for buttons | transparent\n--rich-text-editor-button-toggled-opacity | overrides default opacity when button is toggled | 1\n--rich-text-editor-button-toggled-color | overrides default text color when button is toggled | #222\n--rich-text-editor-button-toggled-bg | overrides default background when button is toggled | #ddd\n--rich-text-editor-button-toggled-border-color | overrides default border-color when button is toggled | transparent\n--rich-text-editor-button-hover-opacity | overrides default opacity when button is hovered or focused | 1\n--rich-text-editor-button-hover-color | overrides default text color when button is hovered or focused  | #000\n--rich-text-editor-button-hover-bg | overrides default background when button is hovered or focused | #f0f0f0\n--rich-text-editor-button-hover-border-color | overrides default border-color when button is hovered or focused | unset\n--rich-text-editor-button-disabled-opacity | overrides default opacity when button is disabled | 1\n--rich-text-editor-button-disabled-color | overrides default text color when button is disabled | #666\n--rich-text-editor-button-disabled-bg | overrides default background when button is disabled | transparent\n--rich-text-editor-button-disabled-border-color | overrides default border-color when button is toggled | transparent\n\nEvents:\n\n  * `cancel` {`CustomEvent<this>`} - \n\n  * `close` {`CustomEvent<this>`} - \n\n  * `editor-change` {`CustomEvent<this>`} - \n\n  * `range-changed` {`CustomEvent<this>`} - \n\n  * `enabled` {`CustomEvent<any>`} - \n\n  * `disabled` {`CustomEvent<any>`} - \n\n  * `paste` {`CustomEvent<any>`} - \n\n  * `rangechange` {`CustomEvent<{ element: this; range: any; }>`} - \n\n  * `shortcut-key-pressed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `paste-disabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `aria-controls` {`string`} - id of element controlled by toolbar\n\n  * `aria-label` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapse-disabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperties:\n\n  * `undoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an undo button\n\n  * `redoButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a redo button\n\n  * `historyButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a history button group: undo + redo\n\n  * `formatButton` {`{ label: string; type: string; }`} - default config for a format button\n\n  * `boldButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a bold button\n\n  * `italicButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for an italic button\n\n  * `underlineButton` {`{ type: string; }`} - default config for an underline button\n\n  * `strikethroughButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `removeFormatButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a remove format button\n\n  * `codeButton` {`{ command: string; commandVal: string; toggles: boolean; label: string; type: string; }`} - default config for a remove format button\n\n  * `basicInlineButtonGroup` {`{ type: string; subtype: string; buttons: { label: string; type: string; }[]; }`} - default config for a style button group: format, bold, italic, and remove format\n\n  * `linkButton` {`{ icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a link button\n\n  * `unlinkButton` {`{ icon: string; label: string; type: string; }`} - default config for a unlink button\n\n  * `linkButtonGroup` {`{ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; }`} - default config for a link button group: link\n\n  * `cutButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a cut button\n\n  * `copyButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a copy button\n\n  * `pasteButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for a paste button\n\n  * `clipboardButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; shortcutKeys: string; type: string; }[]; }`} - default config for a clipboard button group: cut, copy, and paste\n\n  * `subscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a subscript button\n\n  * `superscriptButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a superscript button\n\n  * `scriptButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a script button group: subscript & superscript\n\n  * `symbolButton` {`{ symbolTypes: string[]; type: string; }`} - default config for a symbol button\n\n  * `iconButton` {`{ type: string; }`} - default config for a symbol button\n\n  * `emojiButton` {`{ type: string; }`} - default config for an emoji button\n\n  * `imageButton` {`{ type: string; }`} - default config for an image button\n\n  * `insertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `advancedInsertButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for an insert button group: image\n\n  * `justifyLeftButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyCenterButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyRightButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify left button\n\n  * `justifyFullButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for a justify center button\n\n  * `justifyButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; required: boolean; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for an insert button group: image\n\n  * `orderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an ordered list button\n\n  * `unorderedListButton` {`{ command: string; icon: string; label: string; radio: boolean; type: string; }`} - default config for an unordered list button\n\n  * `blockquoteButton` {`{ command: string; commandVal: string; label: string; icon: string; shortcutKeys: string; toggles: boolean; type: string; }`} - default config for a blockquote button\n\n  * `indentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an indent button\n\n  * `outdentButton` {`{ command: string; icon: string; label: string; shortcutKeys: string; type: string; }`} - default config for an outdent button\n\n  * `listButtonGroup` {`{ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `listIndentButtonGroup` {`{ type: string; subtype: string; buttons: ({ type: string; subtype: string; \"aria-label\": string; buttons: { command: string; icon: string; label: string; radio: boolean; type: string; }[]; } | { command: string; icon: string; label: string; shortcutKeys: string; type: string; })[]; }`} - default config for a list and indent button group:\nordered, unordered, blockquote, indent, outdent\n\n  * `saveButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for an save button\n\n  * `closeButton` {`{ command: string; icon: string; label: string; type: string; }`} - default config for a close button\n\n  * `saveCloseButtonGroup` {`{ type: string; subtype: string; buttons: { command: string; icon: string; label: string; type: string; }[]; }`} - default config for a save and close button group: save and close\n\n  * `sourceButton` {`{ type: string; }`} - default config for a view source button\n\n  * `sourceButtonGroup` {`{ type: string; subtype: string; buttons: { type: string; }[]; }`} - default config for a source button group: view source\n\n  * `defaultConfig` {`{ type: string; subtype: string; buttons: { type: string; }[]; }[]`} - default config for toolbar with\ndefault history, style, link, clipboard, script, insert, and list button groups\n\n  * `miniConfig` {`({ type: string; subtype: string; buttons: { icon: string; label: string; type: string; }[]; } | { type: string; buttons: { command: string; icon: string; label: string; type: string; }[]; })[]`} - default config for toolbar with\ndefault a custom group of style buttons,\ndefault link button group,\ndefault script button group,\nand a custom list button groups\n\n  * `miniTemplate` {`TemplateResult<1>`} - a template that places toolbar in a container\nso that it can be positioned absolutely\n\n  * `target` - `rich-text-editor` element that is currently in `editing` mode\n\n  * `savedSelection` - current text selected range.\n\n  * `registered` {`boolean`} - selection singleton\n\n  * `selectedNode` - currently selected node\n\n  * `selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\n  * `show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\n  * `__canceledEdits` - contains cancelled edits\n\n  * `__pasteDisabled` {`boolean`} - hides paste button in Firefox\n\n  * `__prompt` - \n\n  * `__promptOpen` {`boolean`} - whether prompt is open\n\n  * `controls` {`string`} - id of editor currently being controlled\n\n  * `disconnected` {`boolean`} - determines if the toolbar is hidden\n\n  * `noSelection` {`boolean`} - determines if the toolbar has an extive selection\n\n  * `observer` {`MutationObserver`} - mutation observer\n\n  * `isRangeInScope` - determines if current range is in scope of the target\n\n  * `enabledTargetHandlers` {`{ keydown: any; keypress: any; mousedown: any; mouseup: any; }`} - \n\n  * `targetHTML` {`string`} - gets cleaned HTML from the target\n\n  * `clickableElements` - Tracks inline widgets that require selection data\n\n  * `breadcrumbsLabel` {`string`} - The label for the breadcrums area.\n\n  * `breadcrumbsSelectAllLabel` {`string`} - The label for the breadcrums area.\n\n  * `range` - current text selected range, which is actually a range.\n\n  * `__toolbar` - \n\n  * `__source` - \n\n  * `commandIsToggled` {`boolean`} - \n\n  * `hasBreadcrumbs` {`boolean`} - whether or not toolbar breadcrumbs\n(override to force a toolbar to always use or not use them)\n\n  * `toggledCommands` {`any[]`} - an array of all the valid commands that are toggled\n\n  * `validCommands` {`string[]`} - gets valid commands list\n\n  * `highlighted` {`boolean`} - determines if range is being preserved by highlight\n\n  * `haxUIElement` {`boolean`} - \n\n  * `__highlight` - \n\n  * `__clipboard` - \n\n  * `alwaysExpanded` {`boolean`} - always expanded so more button is unnecessary?\n\n  * `ariaControls` {`string`} - id of element controlled by toolbar\n\n  * `ariaLabel` {`string`} - label for the toolbar\n\n  * `id` {`string`} - `rich-text-editor` unique id\n\n  * `moreShortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\n  * `buttons` {`any[]`} - array of rendered buttons\n\n  * `focused` {`boolean`} - does toolbar have focus\n\n  * `hovered` {`boolean`} - is mouseover toolbar\n\n  * `moreButton` {`TemplateResult<1>`} - more button's template\n\n  * `toolbarTemplate` - default toolbar template uses simple-toolbar\n\n  * `firstItem` - gets first main menu item\n\n  * `nextItem` - gets next main menu item\n\n  * `previousItem` - gets next main menu item\n\n  * `lastItem` - gets last main menu item\n\n  * `mainItems` {`any[]`} - gets main menu items\n\n  * `keyCode` {`{ TAB: number; ENTER: number; ESC: number; SPACE: number; PAGEUP: number; PAGEDOWN: number; END: number; HOME: number; LEFT: number; UP: number; RIGHT: number; DOWN: number; }`} - key codes by key\n\n  * `collapsed` {`boolean`} - is toolbar collapsed?\n\n  * `collapseDisabled` {`boolean`} - whether there is no need to collapse\n\n  * `config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\n  * `__buttons` {`any[]`} - raw array of buttons\n\n  * `__focused` {`boolean`} - whether toolbar has focus\n\n  * `__hovered` {`boolean`} - whether toolbar is hovered\n\n  * `icon` {`string`} - \n\n  * `label` {`string`} - \n\n  * `toggledLabel` {`string`} - \n\n  * `showTextLabel` {`boolean`} - \n\n  * `shortcut` {`string`} - \n\n  * `sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\n  * `shortcutKeys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.",
      "attributes": [
        {
          "name": "target",
          "description": "`target` - `rich-text-editor` element that is currently in `editing` mode\n\nProperty: target"
        },
        {
          "name": "savedSelection",
          "description": "`savedSelection` - current text selected range.\n\nProperty: savedSelection"
        },
        {
          "name": "registered",
          "description": "`registered` {`boolean`} - selection singleton\n\nProperty: registered",
          "valueSet": "v"
        },
        {
          "name": "selectedNode",
          "description": "`selectedNode` - currently selected node\n\nProperty: selectedNode"
        },
        {
          "name": "selectionAncestors",
          "description": "`selectionAncestors` {`any[]`} - array of ancestors of currently selected node\n\nProperty: selectionAncestors"
        },
        {
          "name": "show",
          "description": "`show` {`string`} - when to make toolbar visible:\n\"always\" to keep it visible,\n\"selection\" when there is an active selection,\nor defaults to only when connected to a toolbar\n\nProperty: show"
        },
        {
          "name": "__canceledEdits",
          "description": "`__canceledEdits` - contains cancelled edits\n\nProperty: __canceledEdits"
        },
        {
          "name": "paste-disabled",
          "description": "`paste-disabled` {`boolean`} - hides paste button in Firefox\n\nProperty: __pasteDisabled",
          "valueSet": "v"
        },
        {
          "name": "__prompt",
          "description": "`__prompt` - \n\nProperty: __prompt"
        },
        {
          "name": "__promptOpen",
          "description": "`__promptOpen` {`boolean`} - whether prompt is open\n\nProperty: __promptOpen",
          "valueSet": "v"
        },
        {
          "name": "clickableElements",
          "description": "`clickableElements` - Tracks inline widgets that require selection data\n\nProperty: clickableElements\n\nDefault: [object Object]"
        },
        {
          "name": "breadcrumbs-label",
          "description": "`breadcrumbs-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsLabel\n\nDefault: Select"
        },
        {
          "name": "breadcrumbs-select-all-label",
          "description": "`breadcrumbs-select-all-label` {`string`} - The label for the breadcrums area.\n\nProperty: breadcrumbsSelectAllLabel\n\nDefault: All"
        },
        {
          "name": "range",
          "description": "`range` - current text selected range, which is actually a range.\n\nProperty: range"
        },
        {
          "name": "__toolbar",
          "description": "`__toolbar` - \n\nProperty: __toolbar"
        },
        {
          "name": "__source",
          "description": "`__source` - \n\nProperty: __source"
        },
        {
          "name": "__highlight",
          "description": "`__highlight` - \n\nProperty: __highlight"
        },
        {
          "name": "__clipboard",
          "description": "`__clipboard` - \n\nProperty: __clipboard"
        },
        {
          "name": "always-expanded",
          "description": "`always-expanded` {`boolean`} - always expanded so more button is unnecessary?\n\nProperty: alwaysExpanded",
          "valueSet": "v"
        },
        {
          "name": "aria-controls",
          "description": "`aria-controls` {`string`} - id of element controlled by toolbar\n\nProperty: ariaControls"
        },
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - label for the toolbar\n\nProperty: ariaLabel"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - `rich-text-editor` unique id\n\nProperty: id"
        },
        {
          "name": "more-shortcuts",
          "description": "`more-shortcuts` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: moreShortcuts"
        },
        {
          "name": "collapsed",
          "description": "`collapsed` {`boolean`} - is toolbar collapsed?\n\nProperty: collapsed\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "collapse-disabled",
          "description": "`collapse-disabled` {`boolean`} - whether there is no need to collapse\n\nProperty: collapseDisabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "config",
          "description": "`config` {`{}[]`} - Custom configuration of toolbar groups and buttons.\n(See default value for example using default configuration.)\n\nProperty: config\n\nDefault: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
        },
        {
          "name": "__buttons",
          "description": "`__buttons` {`any[]`} - raw array of buttons\n\nProperty: __buttons\n\nDefault: "
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - whether toolbar has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - whether toolbar is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Should toolbar stick to top so that it is always visible?\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "shortcut-keys",
          "description": "`shortcut-keys` - Optional space-sperated list of keyboard shortcuts for editor\nto fire this button, see iron-a11y-keys for more info.\n\nProperty: shortcutKeys\n\nDefault: [object Object]"
        },
        {
          "name": "oncancel",
          "description": "`cancel` {`CustomEvent<this>`} - "
        },
        {
          "name": "onclose",
          "description": "`close` {`CustomEvent<this>`} - "
        },
        {
          "name": "oneditor-change",
          "description": "`editor-change` {`CustomEvent<this>`} - "
        },
        {
          "name": "onrange-changed",
          "description": "`range-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onenabled",
          "description": "`enabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "ondisabled",
          "description": "`disabled` {`CustomEvent<any>`} - "
        },
        {
          "name": "onpaste",
          "description": "`paste` {`CustomEvent<any>`} - "
        },
        {
          "name": "onrangechange",
          "description": "`rangechange` {`CustomEvent<{ element: this; range: any; }>`} - "
        },
        {
          "name": "onshortcut-key-pressed",
          "description": "`shortcut-key-pressed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor",
      "description": "`rich-text-editor`\na standalone rich text editor\n(can customize by extending RichTextEditorBehaviors)\n### Styling\n\n`<rich-text-editor>`  uses RichTextStyles variables, \nas well as an additional style:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--rich-text-editor-min-height | minimum height of editor | 20px\n\nEvents:\n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `contenteditable-change` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar-id` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\nProperties:\n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `editable` {`boolean`} - \n\n  * `isEmpty` {`boolean`} - \n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbarId` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - ",
      "attributes": [
        {
          "name": "contenteditable",
          "description": "`contenteditable` {`string`} - Maps to editing attribute\n\nProperty: contenteditable"
        },
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "aria-placeholder",
          "description": "`aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar-id",
          "description": "`toolbar-id` {`string`} - id for toolbar\n\nProperty: toolbarId\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: rich-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncontenteditable-change",
          "description": "`contenteditable-change` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "rich-text-editor",
      "description": "`rich-text-editor`\na standalone rich text editor\n(can customize by extending RichTextEditorBehaviors)\n### Styling\n\n`<rich-text-editor>`  uses RichTextStyles variables, \nas well as an additional style:\n\nCustom property | Description | Default\n----------------|-------------|----------\n--rich-text-editor-min-height | minimum height of editor | 20px\n\nEvents:\n\n  * `focus` {`CustomEvent<any>`} - \n\n  * `contenteditable-change` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `view-source` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbar-id` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\nProperties:\n\n  * `contenteditable` {`string`} - Maps to editing attribute\n\n  * `disableHover` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `rawhtml` {`string`} - raw html\n\n  * `viewSource` {`boolean`} - whether editor is view source code mode\n\n  * `__codeEditorValue` {`string`} - code-editor for view source\n\n  * `__needsUpdate` {`boolean`} - has focus\n\n  * `editable` {`boolean`} - \n\n  * `isEmpty` {`boolean`} - \n\n  * `placeholder` {`string`} - Placeholder text for empty editable regions\n\n  * `toolbarId` {`string`} - id for toolbar\n\n  * `type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\n  * `id` {`string`} - editor's unique id\n\n  * `range` - current range\n\n  * `disabled` {`boolean`} - don't reveal toolbar on mouseover\n\n  * `__focused` {`boolean`} - has focus\n\n  * `__hovered` {`boolean`} - is hovered\n\n  * `editing` {`boolean`} - ",
      "attributes": [
        {
          "name": "contenteditable",
          "description": "`contenteditable` {`string`} - Maps to editing attribute\n\nProperty: contenteditable"
        },
        {
          "name": "disable-hover",
          "description": "`disable-hover` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disableHover",
          "valueSet": "v"
        },
        {
          "name": "rawhtml",
          "description": "`rawhtml` {`string`} - raw html\n\nProperty: rawhtml"
        },
        {
          "name": "view-source",
          "description": "`view-source` {`boolean`} - whether editor is view source code mode\n\nProperty: viewSource",
          "valueSet": "v"
        },
        {
          "name": "__codeEditorValue",
          "description": "`__codeEditorValue` {`string`} - code-editor for view source\n\nProperty: __codeEditorValue"
        },
        {
          "name": "__needsUpdate",
          "description": "`__needsUpdate` {`boolean`} - has focus\n\nProperty: __needsUpdate",
          "valueSet": "v"
        },
        {
          "name": "aria-placeholder",
          "description": "`aria-placeholder` {`string`} - Placeholder text for empty editable regions\n\nProperty: placeholder\n\nDefault: Click to edit"
        },
        {
          "name": "toolbar-id",
          "description": "`toolbar-id` {`string`} - id for toolbar\n\nProperty: toolbarId\n\nDefault: "
        },
        {
          "name": "type",
          "description": "`type` {`string`} - type of editor toolbar, i.e.\nfull - full for full toolbar with breadcrumb,\nmini - mini for mini floating toolbar, or\ndefault toolbar if neither.\n\nProperty: type\n\nDefault: rich-text-editor-toolbar"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - editor's unique id\n\nProperty: id\n\nDefault: "
        },
        {
          "name": "range",
          "description": "`range` - current range\n\nProperty: range\n\nDefault: undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - don't reveal toolbar on mouseover\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__focused",
          "description": "`__focused` {`boolean`} - has focus\n\nProperty: __focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__hovered",
          "description": "`__hovered` {`boolean`} - is hovered\n\nProperty: __hovered\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onfocus",
          "description": "`focus` {`CustomEvent<any>`} - "
        },
        {
          "name": "oncontenteditable-change",
          "description": "`contenteditable-change` {`CustomEvent<this>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
